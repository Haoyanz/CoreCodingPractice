/*
Determine the largest square surrounded by a bunch of matches (each match is either horizontal or vertical), return the length of the largest square.

The input is a matrix of points. Each point has one of the following values:

0 - there is no match to its right or bottom.

1 - there is a match to its right.

2 - there is a match to its bottom.

3 - there is a match to its right, and a match to its bottom.



Assumptions

The given matrix is guaranteed to be of size M * N, where M, N >= 0



Examples

{{3, 1, 1, 3, 0, 1, 1, 0},

 {2, 0, 0, 2, 0, 0, 0, 0},

 {3, 1, 3, 0, 0, 0, 0, 0},

 {2, 0, 2, 0, 0, 0, 0, 0},

 {1, 1, 0, 0, 0, 0, 0, 0}}

The largest square has length of 2.
*/

public class Solution {
  public int largestSquareOfMatches(int[][] matrix) {
    // Write your solution here
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length;
    int n = matrix[0].length;
    int[][] mLR = new int[m][n];
    int[][] mTD = new int[m][n];
    scan(matrix, mLR, mTD, m, n);
    return getMaxLength(mLR, mTD, m, n);
  }
  private void scan(int[][] matrix, int[][] mLR, int[][] mTD, int m, int n){
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1 || matrix[i][j] == 3){
          if(j != n - 1){
            mLR[i][j] = mLR[i][j + 1] + 1;
          }
        }
        if(matrix[i][j] == 2 || matrix[i][j] == 3){
          if(i != m - 1){
            mTD[i][j] = mTD[i + 1][j] + 1;
          }
        }
      }
    }
  }
  private int getMaxLength(int[][] mLR, int[][] mTD, int m, int n){
    int max = 0;
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        for(int k = Math.min(mLR[i][j], mTD[i][j]); k >= 1; k--){
          if(mLR[i][j] != 0){
            if(mLR[i + k][j] >= k && mTD[i][j + k] >= k){
              max = Math.max(max, k);
              break;
            }
          }
        }
      }
    }
    return max;
  }
}
//Time Complexity : O(n ^ 3)
//Space Complexity : O(n ^ 2)
