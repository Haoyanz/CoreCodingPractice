/*
Determine the largest square surrounded by 1s in a binary matrix (a binary matrix only contains 0 and 1), return the length of the largest square.

Assumptions : The given matrix is guaranteed to be of size M * N, where M, N >= 0

Examples

{{1, 0, 1, 1, 1},

 {1, 1, 1, 1, 1},

 {1, 1, 0, 1, 0},

 {1, 1, 1, 1, 1},

 {1, 1, 1, 0, 0}}

The largest square surrounded by 1s has length of 3.
*/

public class Solution {
  public int largestSquareSurroundedByOne(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length;
    int n = matrix[0].length;
    int[][] leftRight = new int[m][n];
    int[][] upDown = new int[m][n];
    scan(matrix, leftRight, upDown, m, n);
    return findMaxLength(leftRight, upDown, m, n);
  }
  private void scan(int[][] matrix, int[][] leftRight, int[][] upDown, int m, int n){
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1 && j == n - 1){
            leftRight[i][j] = 1;
            upDown[i][j] = 1;
          } else if (i == m - 1){
            leftRight[i][j] = leftRight[i][j + 1] + 1;
            upDown[i][j] = 1;
          } else if (j == n - 1){
            leftRight[i][j] = 1;
            upDown[i][j] = upDown[i + 1][j] + 1;
          } else {
            leftRight[i][j] = leftRight[i][j + 1] + 1;
            upDown[i][j] = upDown[i + 1][j] + 1;
          }
        }
      }
    }
  }
  private int findMaxLength(int[][] leftRight, int[][] upDown, int m, int n){
    int max = 0;
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        for(int k = Math.min(leftRight[i][j], upDown[i][j]) - 1; k >= 0; k--){
          if(leftRight[i][j] != 0){
            if(leftRight[i + k][j] > k && upDown[i][j + k] > k){
              max = Math.max(max, k + 1);
              break;
            }
          }
        }
      }
    }
    return max;
  }
}
//Time Complexity : O(n ^ 3)
//Space Complexity : O(n ^ 2)
