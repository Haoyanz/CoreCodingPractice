/*
Given a matrix that contains only 1s and 0s, find the largest X shape which contains only 1s, with the same arm lengths and the four arms joining at the central point.

Return the arm length of the largest X shape.

Assumptions : The given matrix is not null, has size of N * M, N >= 0 and M >= 0.

Examples

{ {0, 0, 0, 0},

  {1, 1, 1, 1},

  {0, 1, 1, 1},

  {1, 0, 1, 1} }

the largest X of 1s has arm length 2.
*/

public class Solution {
  public int largest(int[][] matrix) {
    /*
    scan 4 directions : topLeft to botRight
                        topRight to botLeft
                        botLeft to topRight
                        botRight to topLeft
    store max consecutive 1s in that direction at index i,j INCLUDING ij th element
    for each index i, j keep smallest result
    return the largest result 
    */
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length;
    int n = matrix[0].length;
    int[][] m1 = fillTop(matrix, m, n);
    int[][] m2 = fillBot(matrix, m, n);
    return merge(m1, m2, m, n);
  }
  private int[][] fillTop(int[][] matrix, int m, int n){
    int[][] topLeft = new int[m][n];
    int[][] topRight = new int[m][n];
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        if(matrix[i][j] == 1){
          if(i == 0){
            topLeft[i][j] = 1;
            topRight[i][j] = 1;
          } else if (j == 0){
            topLeft[i][j] = 1;
            topRight[i][j] = topRight[i - 1][j + 1] + 1;
          } else if (j == n - 1){
            topLeft[i][j] = topLeft[i - 1][j - 1] + 1;
            topRight[i][j] = 1;
          } else {
            topLeft[i][j] = topLeft[i - 1][j - 1] + 1;
            topRight[i][j] = topRight[i - 1][j + 1] + 1;
          }
        }
      }
    }
    merge(topLeft, topRight, m, n);
    return topLeft;
  }
  private int[][] fillBot(int[][] matrix, int m, int n){
    int[][] botLeft = new int[m][n];
    int[][] botRight = new int[m][n];
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1){
            botLeft[i][j] = 1;
            botRight[i][j] = 1;
          } else if (j == 0){
            botLeft[i][j] = 1;
            botRight[i][j] = botRight[i + 1][j + 1] + 1;
          } else if (j == n - 1){
            botLeft[i][j] = botLeft[i + 1][j - 1] + 1;
            botRight[i][j] = 1;
          } else {
            botLeft[i][j] = botLeft[i + 1][j - 1] + 1;
            botRight[i][j] = botRight[i + 1][j + 1] + 1;
          }
        }
      }
    }
    merge(botLeft, botRight, m, n);
    return botLeft;
  }
  private int merge(int[][] m1, int[][] m2, int m, int n){
    int max = 0;
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        m1[i][j] = Math.min(m1[i][j], m2[i][j]);
        max = Math.max(max, m1[i][j]);
      }
    }
    return max;
  }
}
//Time Complexity : O(n ^ 2)
//Space Complexity : O(n ^ 2)
