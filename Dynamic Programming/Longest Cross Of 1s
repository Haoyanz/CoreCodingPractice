/*
Given a matrix that contains only 1s and 0s, find the largest cross which contains only 1s, with the same arm lengths and the four arms joining at the central point.

Return the arm length of the largest cross.

Assumptions : The given matrix is not null, has size of N * M, N >= 0 and M >= 0.

Examples

{ {0, 0, 0, 0},

  {1, 1, 1, 1},

  {0, 1, 1, 1},

  {1, 0, 1, 1} }

the largest cross of 1s has arm length 2.
*/

public class Solution {
  public int largest(int[][] matrix) {
    // Write your solution here
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length;
    int n = matrix[0].length;
    int[][] m1 = fillLeftToRightUpToDown(matrix, new int[m][n], new int[m][n], m, n);
    int[][] m2 = fillRightToLeftDownToUp(matrix, new int[m][n], new int[m][n], m, n);
    return merge(m1, m2, m, n);
  }
  private int[][] fillLeftToRightUpToDown(int[][] matrix, int[][] mLeftRight, int[][] mUpDown, int m, int n){
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        if(matrix[i][j] == 1){
          if(i == 0 && j == 0){
            mLeftRight[i][j] = 1;
            mUpDown[i][j] = 1;
          } else if(i == 0){
            mUpDown[i][j] = 1;
            mLeftRight[i][j] = mLeftRight[i][j - 1] + 1;
          } else if (j == 0){
            mLeftRight[i][j] = 1;
            mUpDown[i][j] = mUpDown[i - 1][j] + 1;
          } else {
            mLeftRight[i][j] = mLeftRight[i][j - 1] + 1;
            mUpDown[i][j] = mUpDown[i - 1][j] + 1;
          }
        }
      }
    }
    merge(mLeftRight, mUpDown, m, n);
    return mLeftRight;
  }
  private int[][] fillRightToLeftDownToUp(int[][] matrix, int[][] mLeftRight, int[][] mUpDown, int m, int n){
    int[][] result = new int[m][n];
    for(int i = m - 1; i >=0; i--){
      for(int j = n - 1; j >=0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1 && j == n - 1){
            mLeftRight[i][j] = 1;
            mUpDown[i][j] = 1;
          } else if (i == m - 1){
            mUpDown[i][j] = 1;
            mLeftRight[i][j] = mLeftRight[i][j + 1] + 1;
          } else if (j == n - 1){
            mLeftRight[i][j] = 1;
            mUpDown[i][j] = mUpDown[i + 1][j] + 1;
          } else {
            mLeftRight[i][j] = mLeftRight[i][j + 1] + 1;
            mUpDown[i][j] = mUpDown[i + 1][j] + 1;
          }
        }
      }
    }
    merge(mLeftRight, mUpDown, m, n);
    return mLeftRight;
  }
  private int merge(int[][] m1, int[][] m2, int m, int n){
    int max = 0;
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        m1[i][j] = Math.min(m1[i][j], m2[i][j]);
        max = Math.max(max, m1[i][j]);
      }
    }
    return max;
  }
}
//Time Complexity : O(n ^ 2)
//Space Complexity : O(n ^ 2)
