/*
Given an array containing only 0s and 1s, find the length of the longest subarray of consecutive 1s.

Assumptions : The given array is not null

Examples
  {0, 1, 0, 1, 1, 1, 0}, the longest consecutive 1s is 3.
*/

public class Solution {
  public int longest(int[] array) {
    /*
    Use DP
    Base case : m[0] = array[0]
    Induction rule : m[i] = m[i - 1] + 1     if array[i] == 1
                     m[i] = 0                otherwise
                     m[i] represents longest consecutive 1s from [0, i] INCLUDING ith element
    */
    if(array.length == 0){
      return 0;
    }
    int globalMax = 0;
    int curMax = 0;
    for(int i = 0; i < array.length; i++){
      if(array[i] == 1){
        curMax++;
        globalMax = Math.max(globalMax, curMax);
      } else {
        curMax = 0;
      }
    }
    return globalMax;
  }
}
//Time Complexity : O(n)
//Space Complexity : O(1)
