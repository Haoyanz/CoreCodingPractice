/*
Rotate an N * N matrix clockwise 90 degrees.

Assumptions : The matrix is not null and N >= 0

Examples

{ {1,  2,  3}

  {8,  9,  4},

  {7,  6,  5} }

after rotation is

{ {7,  8,  1}

  {6,  9,  2},

  {5,  4,  3} }
*/

public class Solution {
  public void rotate(int[][] matrix) {
    int n = matrix.length;
    if(n <= 1){
      return;
    }
    /*
    for each layer (total n / 2 layers), swap elements
    rule : matrix[i][j] = matrix[n - 1 - j][i]
    */
    for(int i = 0; i < n / 2; i++){
      for(int j = i; j < n - 1 - i; j++){
        int temp = matrix[i][j];
        matrix[i][j] = matrix[n - 1 - j][i];
        matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
        matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
        matrix[j][n - 1 - i] = temp;
      }
    }
  }
}
//Time Complexity : O(n ^ 2)
//Space Complexity : O(1)  In Place
